/*
// Licensed to Julian Hyde under one or more contributor license
// agreements. See the NOTICE file distributed with this work for
// additional information regarding copyright ownership.
//
// Julian Hyde licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except in
// compliance with the License. You may obtain a copy of the License at:
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
*/
package org.eigenbase.oj.stmt;

import java.lang.reflect.*;
import java.util.List;

import openjava.ptree.*;

import org.eigenbase.rel.*;
import org.eigenbase.reltype.*;
import org.eigenbase.util.*;

import net.hydromatic.optiq.runtime.Typed;


/**
 * PreparedExecution is a PreparedResult of a statement for which Java code was
 * generated by preparation.
 *
 * @author John V. Sichi
 * @version $Id$
 */
public class PreparedExecution
    implements PreparedResult, Typed
{
    //~ Instance fields --------------------------------------------------------

    private final ParseTree parseTree;
    private final RelNode rootRel;
    private final RelDataType rowType;
    private final boolean isDml;
    private final TableModificationRel.Operation tableModOp;
    private final BoundMethod boundMethod;
    private final List<List<String>> fieldOrigins;

    //~ Constructors -----------------------------------------------------------

    protected PreparedExecution(
        ParseTree parseTree,
        RelNode rootRel,
        RelDataType rowType,
        boolean isDml,
        TableModificationRel.Operation tableModOp,
        BoundMethod boundMethod,
        List<List<String>> fieldOrigins)
    {
        this.parseTree = parseTree;
        this.rootRel = rootRel;
        this.rowType = rowType;
        this.isDml = isDml;
        this.tableModOp = tableModOp;
        this.boundMethod = boundMethod;
        this.fieldOrigins = fieldOrigins;
    }

    //~ Methods ----------------------------------------------------------------

    public String getCode()
    {
        return parseTree.toString();
    }

    public boolean isDml()
    {
        return isDml;
    }

    public TableModificationRel.Operation getTableModOp()
    {
        return tableModOp;
    }

    public List<List<String>> getFieldOrigins() {
        return fieldOrigins;
    }

    /**
     * Returns the physical row type of this prepared statement. May not be
     * identical to the row type returned by the validator; for example, the
     * field names may have been made unique.
     */
    public RelDataType getPhysicalRowType()
    {
        return rowType;
    }

    public Type getElementType() {
        return Object.class;
    }

    public Method getMethod()
    {
        return boundMethod.method;
    }

    public RelNode getRootRel()
    {
        return rootRel;
    }

    public Object execute()
    {
        try {
            return boundMethod.call();
        } catch (IllegalAccessException e) {
            throw Util.newInternal(e);
        } catch (InvocationTargetException e) {
            throw Util.newInternal(e);
        }
    }

    public void setArgs(Object [] args)
    {
        boundMethod.args = args;
    }
}

// End PreparedExecution.java
